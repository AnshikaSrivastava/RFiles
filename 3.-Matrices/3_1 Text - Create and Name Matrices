Matrix is like the big brother of vector. So where vector is 1-D sequence of similar data elements, a Matrix is a collection
of data elements with Fixed number of rows and columns.

Vector : 1D array of data elements
Matrix : 2D array of data elements

CREATING a Matrix - 

> #To create a matrix use matrix() function. 
> #This by default fills data into resulting matrix column by column
> myMatrix <- matrix(1:8, nrow = 4, ncol = 2)
> myMatrix
     [,1] [,2]
[1,]    1    5
[2,]    2    6
[3,]    3    7
[4,]    4    8



> #incase you want to fill data row by row that's easy too just use byrow = True
> myMatrix <- matrix(1:6, nrow = 3, ncol = 2, byrow = TRUE)
> myMatrix
     [,1] [,2]
[1,]    1    2
[2,]    3    4
[3,]    5    6


> #even if ou don't specify rows or columns, R will logically distribute the values among
> #rows or columns as long as atleast one row/ column entry is provided
> myMatrix <- matrix(1:12,nrow = 4)
> myMatrix
     [,1] [,2] [,3]
[1,]    1    5    9
[2,]    2    6   10
[3,]    3    7   11
[4,]    4    8   12

> #using vector to generate a matrix, by default it will create squared matrices if 
> # nrow and ncol both aren't defined. Along with issuing a warning
> vec <- c(1,2,3)
> myMatrix <- matrix(vec, nrow = 2, byrow = TRUE)
Warning message:
In matrix(vec, nrow = 2, byrow = TRUE) :
  data length [3] is not a sub-multiple or multiple of the number of rows [2]
> myMatrix
     [,1] [,2]
[1,]    1    2
[2,]    3    1


> #now let's pass ncol element too
> myMatrix <- matrix(vec, nrow = 2, ncol = 3, byrow = TRUE)
> myMatrix
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    1    2    3


> #using rbind (row bind) and cbind (column bind)
> # syntax rbind(vector/array1,vector/array2,vector/array3)
> myMatrix <- rbind(1:3,3:1,4:2)
> myMatrix
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    3    2    1
[3,]    4    3    2

> #similarly using cbind all the data is binded by columns
> myMatrix <- cbind(3:1,7:5,1:3)
> myMatrix
     [,1] [,2] [,3]
[1,]    3    7    1
[2,]    2    6    2
[3,]    1    5    3

> myMatrix <- cbind(1:3,5:10,4:2)
> myMatrix
     [,1] [,2] [,3]
[1,]    1    5    4
[2,]    2    6    3
[3,]    3    7    2
[4,]    1    8    4
[5,]    2    9    3
[6,]    3   10    2

> #So I saw that the shorter data vectors got repeated to match longer vector.
> myMatrix <- cbind(vec,vec*3,vec+10)
> myMatrix
     vec     
[1,]   1 3 11
[2,]   2 6 12
[3,]   3 9 13

> # case 3 - pasing an entire matrix to rbind / cbind
> # suppose to the previously existing matrix - myMatrix I want to add a row containing
> # values from 8-10. then let's use rbing. Alternatively if I had wanted to add another
> # column to any existing matrix I wold have used cbind
> myMatrix <- rbind(myMatrix,8:10)
> myMatrix
     vec     
[1,]   1 3 11
[2,]   2 6 12
[3,]   3 9 13
[4,]   7 8  9
[5,]   8 9 10


> #RowNames and ColNames
> #similar to names function rownames and columnNames can be assigned
> rownames(myMatrix) <- c("row1","row2","row3","row4", "row5")
> myMatrix
     vec     
row1   1 3 11
row2   2 6 12
row3   3 9 13
row4   7 8  9
row5   8 9 10



